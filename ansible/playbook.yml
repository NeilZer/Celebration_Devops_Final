- name: Create app infrastructure on cloud
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - group_vars/env
  vars:
    ansible_host_key_checking: false
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ aws_region }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        multi_ok: no
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    - name: Add VPC definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/colman.env
        regexp: 'vpc_id: '
        line: 'vpc_id: {{ vpc.vpc.id }}'
        state: present
        create: true

    - name: associate subnet to the VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ subnet_cidr }}"
        map_public: "{{ item.external_ip }}"
        az: "{{ item.az }}"
        tags:
          Name: "{{ item.subnet_name }}"
        wait: yes
      loop:
        - subnet_name: "{{ vpc_name }}_public"
          env_network: "{{ subnet_cidr }}"
          external_ip: yes
          az: "{{ subnet }}"
      register: subnet

    - name: Add subnet definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/colman.env
        regexp: 'subnet_id: '
        line: 'subnet_id: {{ subnet.results[0].subnet.id }}'
        state: present
        create: true

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ vpc_name }}_igw"
      register: igw

    - name: Add IGW definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/colman.env
        regexp: 'igw_id: '
        line: 'igw_id: {{ igw.gateway_id }}'
        state: present
        create: true

    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        subnets:
          - "{{ subnet.results[0].subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}public_rt"

    - name: Create security group
      amazon.aws.ec2_group:
        name: "{{ vpc_name }} VPC SG"
        description: "{{ vpc_name }} VPC SG"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        rules:
          - proto: tcp
            ports: [22, 80, 3001]
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        image_id: "{{ aws_ubuntu_ami }}"
        wait: yes
        instance_type: "{{ Server_type }}"
        region: "{{ aws_region }}"
        key_name: "{{ keypair }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ server_volume_size }}"
              volume_type: gp3
              delete_on_termination: true
        tags:
          Name: "{{ server_name }}"
          Environment: "{{ env }}"
        count: 1
        wait_timeout: 300
        vpc_subnet_id: "{{ subnet.results[0].subnet.id }}"
        security_group: "{{ sg.group_id }}"
        network:
          assign_public_ip: yes
        state: running
      register: server_ec2

    - name: get ip of instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ server_name }}"
          instance-state-name: ["running"]
      register: ec2_data

    - debug: var=ec2_data.instances[0].public_ip_address

    - name: Add server public IP to app host group
      add_host: hostname={{ ec2_data.instances[0].public_ip_address }} groups=app

    - name: Add public IP  definition to vars file
      ansible.builtin.lineinfile:
        path: group_vars/colman.env
        regexp: 'server_id: '
        line: 'server_id: {{ ec2_data.instances[0].instance_id }}'
        state: present
        create: true

    - name: Wait for SSH to be ready
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

    - name: Pause for ubuntu user access after boot
      ansible.builtin.pause:
        seconds: 40

# -------------------------- STAGE 2: EC2 configuration --------------------------

- name: Setup server and deploy Node.js app
  hosts: app
  user: ubuntu
  become: yes
  gather_facts: false
  vars_files:
    - group_vars/docker.env

  tasks:
  
    
    - name: Wait for apt lock to be released
      shell: |
        while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
          echo "Waiting for apt lock...";
          sleep 2;
        done
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for dpkg lock...";
          sleep 2;
        done
     
    - name: Update apt and install prerequisites
      apt:
        name:
          - curl
          - git
          - nodejs
          - npm
          - python3-pip
        state: present
        update_cache: true
      register: apt_output

    - debug:
        var: apt_output

    - name: Add GPG key for Docker
      ansible.builtin.shell: wget -qO - https://download.docker.com/linux/ubuntu/gpg | apt-key add -

    - name: Add docker repository (Ubuntu 20.04)
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Clean apt and fix broken dependencies
      shell: |
        apt-get clean
        apt-get update
        apt-get install -f

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Restart Docker service
      service: 
        name: docker
        state: restarted
        enabled: yes

    - name: Copy private SSH key to remote host
      copy:
        src: ~/.ssh/id_rsa
        dest: /root/.ssh/id_rsa
        owner: root
        group: root
        mode: '0600'

    - name: Clone the app repo
      git:
        repo: git@github.com:NeilZer/Celebration_Devops_Final.git
        dest: /home/ubuntu/Celebration_Devops_Final
        version: main
        key_file: ~/.ssh/id_rsa
        accept_hostkey: yes
        force: yes


    - name: build docker image and push to DockerHub
      shell: "{{ item }}"
      args:
        chdir: /home/ubuntu/Celebration_Devops_Final
      with_items:
        - docker login -u {{ docker_user }} -p {{ docker_token }}
        - docker build . --tag {{ docker_user }}/celebration-devops:latest
        - docker push {{ docker_user }}/celebration-devops:latest

    - name: start docker app (both mongo and node)
      shell: docker compose up -d
      args:
        chdir: /home/ubuntu/Celebration_Devops_Final

    - name: Wait for MongoDB to be ready in the container
      shell: |
        for i in {1..30}; do
          docker exec celebration-devops node -e "require('mongoose').connect('mongodb://mongo:27017/celebration').then(()=>process.exit(0)).catch(()=>process.exit(1))"
          if [ $? -eq 0 ]; then
            echo "Mongo is up!"
            break
          fi
          echo "Waiting for MongoDB..."
          sleep 2
        done
      args:
        chdir: /home/ubuntu/Celebration_Devops_Final

    - name: Seed MongoDB with default products
      shell: docker exec celebration-devops node models/seedProducts.js
      args:
        chdir: /home/ubuntu/Celebration_Devops_Final
        
    - name: get public IP from server
      shell: curl ident.me
      register: ip_address

    - debug: 
       msg:
        - "Don't forget to change the HOST secret in GitHub to {{ ip_address.stdout }}"
        - "your app is ready to go at http://{{ ip_address.stdout }}"